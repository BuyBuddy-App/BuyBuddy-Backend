// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  MANAGER
  ADMIN
  BRAND
  USER
  GUEST
}

enum Status {
  UNVERIFIED
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum RevokedReason {
  USER_LOGOUT
  EXPIRED
  ADMIN_REVOKED
  PASSWORD_CHANGE
  TOKEN_REUSE_DETECTED
  ROTATED
  OTHER
}

enum Provider {
  LOCAL
  GOOGLE
}

enum BrandStatus {
  DRAFT // Owner started setup but hasn't submitted for verification
  PENDING // Submitted â€” awaiting manual or automated review (default)
  ACTIVE // Approved and live (can sell / receive payouts)
  SUSPENDED // Temporarily disabled (policy issue, missing docs, etc.)
  REJECTED // Rejected during review (owner can fix & re-submit)
  INACTIVE // Owner intentionally deactivated the brand (soft-delete)
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  CASH_ON_DELIVERY
  APPLE_PAY
  GOOGLE_PAY
  FAWRY
  OTHER
}

enum Category {
  FASHION
  HOME
  BEAUTY
  OTHER
}

model User {
  id                         String         @id @default(uuid())
  name                       String
  email                      String         @unique
  password                   String
  role                       Role           @default(USER)
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  status                     Status         @default(UNVERIFIED)
  verificationCode           String?
  verificationCodeExpiresAt  DateTime?
  passwordResetCode          String?
  passwordResetCodeExpiresAt DateTime?
  RefreshToken               RefreshToken[]
  provider                   Provider       @default(LOCAL)
  providerId                 String?
  brands                     Brand[]

  @@unique([provider, providerId])
  @@index([status])
  @@index([role])
}

model Brand {
  id              String      @id @default(uuid())
  name            String
  description     String?
  logoUrl         String?
  category        String?
  status          BrandStatus @default(DRAFT)
  instagramUrl    String?
  tiktokUrl       String?
  ownerName       String?
  ownerNationalId String?
  ownerPhone      String?
  crn             String?
  taxId           String?
  paymentMethod   String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  User            User        @relation(fields: [userId], references: [id])
  userId          String

  @@index([status])
}

model RefreshToken {
  id            String         @id @default(uuid())
  token         String
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  expiresAt     DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  revokedAt     DateTime?
  revokedReason RevokedReason?
  jti           String         @unique

  @@index([expiresAt])
}
