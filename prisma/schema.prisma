// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  MANAGER
  ADMIN
  BRAND
  USER
  GUEST
}

enum Status {
  UNVERIFIED
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum RevokedReason {
  ACCOUNT_LOGOUT
  EXPIRED
  ADMIN_REVOKED
  PASSWORD_CHANGE
  TOKEN_REUSE_DETECTED
  ROTATED
  OTHER
}

enum Provider {
  LOCAL
  GOOGLE
}

enum BrandStatus {
  DRAFT // Owner started setup but hasn't submitted for verification
  PENDING // Submitted â€” awaiting manual or automated review (default)
  ACTIVE // Approved and live (can sell / receive payouts)
  SUSPENDED // Temporarily disabled (policy issue, missing docs, etc.)
  REJECTED // Rejected during review (owner can fix & re-submit)
  INACTIVE // Owner intentionally deactivated the brand (soft-delete)
}

enum ProductStatus {
  DRAFT
  ARCHIVED
  PUBLISHED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  CASH_ON_DELIVERY
  APPLE_PAY
  GOOGLE_PAY
  FAWRY
  OTHER
}

enum Category {
  FASHION
  HOME
  BEAUTY
  OTHER
}

enum Gender {
  MALE
  FEMALE
}

enum ContentType {
  TEXT
  IMAGE
}

enum ReactionType {
  LIKE
  LOVE
  ADMIRE
}

enum ReviewVisibility {
  PUBLISHED
  HIDDEN
}

enum VoteType {
  UP // helpful
  DOWN // not helpful
}

enum ReportReason {
  SPAM
  OFFENSIVE
  INAPPROPRIATE
  MISLEADING
  FAKE_REVIEW
  OTHER
}

enum NotificationType {
  MESSAGE
  ORDER
  PROMOTION
  SYSTEM
  SECURITY
  REVIEW
  SHIPPING
  OTHER
}

enum OrderStatus {
  DRAFT
  PENDING_PAYMENT
  PAID
  FULFILLING
  PARTIALLY_FULFILLED
  FULFILLED
  CANCELED
  REFUNDED
}

enum PaymentStatus {
  REQUIRES_ACTION
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

enum ShipmentStatus {
  PENDING
  PACKING
  IN_TRANSIT
  DELIVERED
  CANCELED
  RETURNED
}

enum Currency {
  EGP
  USD
  EUR
  SAR
  AED
  QAR
  KWD
  BHD
}

model Account {
  id                         String                           @id @default(uuid())
  name                       String
  email                      String                           @unique
  password                   String
  role                       Role                             @default(USER)
  createdAt                  DateTime                         @default(now())
  updatedAt                  DateTime                         @updatedAt
  status                     Status                           @default(UNVERIFIED)
  verificationCode           String?
  verificationCodeExpiresAt  DateTime?
  passwordResetCode          String?
  passwordResetCodeExpiresAt DateTime?
  refreshTokens              RefreshToken[]
  provider                   Provider                         @default(LOCAL)
  providerId                 String?
  user                       User?
  brand                      Brand?
  ConversationParticipant    PrivateConversationParticipant[]
  sentPrivateMessages        PrivateMessage[]                 @relation("SentMessages")
  reactedMessages            PrivateMessage[]                 @relation("ReactedMessages")
  privateMessageVisibilities PrivateMessageVisibility[]
  Notification               Notification[]
  NotificationRecipient      NotificationRecipient[]
  deviceTokens               DeviceToken[]

  @@unique([provider, providerId])
  @@index([status])
  @@index([role])
}

model DeviceToken {
  id         String   @id @default(uuid())
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  String
  token      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isActive   Boolean  @default(true)
  lastSeenAt DateTime @default(now())

  @@index([accountId])
}

model User {
  id             String          @id @default(uuid())
  accountId      String          @unique
  account        Account         @relation(fields: [accountId], references: [id])
  userName       String          @unique
  photo          String?         @default("https://res.cloudinary.com/dbmr1movf/image/upload/v1757365829/default_j4wib4.jpg")
  phone          String?
  photoPublicId  String?
  gender         Gender?
  cart           Cart?
  birthDate      DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  paymentMethods PaymentMethod[]
  addresses      Address[]
  reviews        Review[]
  reviewVotes    ReviewVote[]
  reviewReports  ReviewReport[]
  reviewReplays  ReviewReply[]
  orders         Order[]
}

model Address {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  government  String?
  city        String?
  addressLine String?
  landmark    String?
  isPrimary   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Brand {
  id              String          @id @default(uuid())
  accountId       String          @unique
  account         Account         @relation(fields: [accountId], references: [id])
  description     String?
  logo            String?
  categories      Category[]
  status          BrandStatus     @default(DRAFT)
  instagramUrl    String?
  tiktokUrl       String?
  businessPhone   String?
  ownerName       String?
  ownerNationalId String?
  ownerPhone      String?
  crn             String?
  taxId           String?
  paymentMethods  PaymentMethod[]
  Products        Product[]
  orders          SubOrder[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([status])
}

model RefreshToken {
  id            String         @id @default(uuid())
  account       Account        @relation(fields: [accountId], references: [id])
  accountId     String
  token         String
  expiresAt     DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  revokedAt     DateTime?
  revokedReason RevokedReason?
  jti           String         @unique

  @@index([expiresAt])
}

model PrivateConversation {
  id           String                           @id @default(uuid())
  createdAt    DateTime                         @default(now())
  updatedAt    DateTime                         @updatedAt
  archivedAt   DateTime?
  participants PrivateConversationParticipant[]
  messages     PrivateMessage[]

  @@index([updatedAt])
}

model PrivateConversationParticipant {
  id             String              @id @default(uuid())
  conversation   PrivateConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  account        Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId      String
  unreadCount    Int                 @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@unique([conversationId, accountId])
  @@index([accountId])
}

model PrivateMessage {
  id             String                     @id @default(uuid())
  conversation   PrivateConversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         Account                    @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  content        String
  contentType    ContentType
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  deletedAt      DateTime?
  attachments    PrivateMessageAttachment[]
  reactionType   ReactionType?
  reactedById    String?
  reactedBy      Account?                   @relation("ReactedMessages", fields: [reactedById], references: [id], onDelete: SetNull)
  visibilities   PrivateMessageVisibility[]

  @@index([conversationId, createdAt])
  @@index([senderId, createdAt])
}

model PrivateMessageAttachment {
  id        String         @id @default(uuid())
  message   PrivateMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  url       String
  mimeType  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([messageId])
}

model PrivateMessageVisibility {
  id        String         @id @default(uuid())
  message   PrivateMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  account   Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  readAt    DateTime?
  deletedAt DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([messageId, accountId])
  @@index([accountId])
  @@index([messageId])
}

model Product {
  id           String        @id @default(uuid())
  brandId      String
  category     Category
  title        String
  slug         String
  description  String?
  attributes   Json?
  status       ProductStatus @default(DRAFT)
  material     String?
  avgRating    Float         @default(0)
  ratingsCount Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  brand    Brand           @relation(fields: [brandId], references: [id])
  images   ProductImage[]
  variants Variant[]
  options  ProductOption[]
  tags     ProductTag[]
  reviews  Review[]

  imageVectors ProductImageEmbedding[]

  @@unique([brandId, slug])
  @@index([category, status, createdAt(sort: Desc)])
  @@index([material])
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  altText   String?
  meta      Json?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  product   Product                @relation(fields: [productId], references: [id])
  embedding ProductImageEmbedding?

  @@unique([productId, sortOrder])
  @@index([productId])
}

model ProductOption {
  id        String  @id @default(uuid())
  productId String
  name      String // machine name, e.g., "color", "size"
  label     String? // display label, e.g., "Color", "Size"
  sortOrder Int     @default(0)

  product       Product              @relation(fields: [productId], references: [id])
  values        ProductOptionValue[]
  VariantOption VariantOption[]

  @@unique([productId, name])
  @@index([productId, sortOrder])
}

model ProductOptionValue {
  id              String  @id @default(uuid())
  productOptionId String
  value           String // machine value, e.g., "red", "xl"
  label           String? // display value, e.g., "Red", "XL"
  colorHex        String? // optional (#RRGGBB)
  sortOrder       Int     @default(0)

  option       ProductOption   @relation(fields: [productOptionId], references: [id])
  variantLinks VariantOption[]

  @@unique([productOptionId, value])
  @@index([productOptionId, sortOrder])
}

model VariantOption {
  id                   String @id @default(uuid())
  variantId            String
  productOptionId      String
  productOptionValueId String

  variant Variant            @relation(fields: [variantId], references: [id])
  option  ProductOption      @relation(fields: [productOptionId], references: [id])
  value   ProductOptionValue @relation(fields: [productOptionValueId], references: [id])

  // Ensure a variant has at most one selection per option (e.g., only one size)
  @@unique([variantId, productOptionId])
  @@index([productOptionValueId])
}

model Variant {
  id         String   @id @default(uuid())
  productId  String
  sku        String
  price      Decimal  @default(0) @db.Decimal(12, 2)
  currency   Currency
  stock      Int      @default(0)
  weight     Float?
  dimensions Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product Product         @relation(fields: [productId], references: [id])
  images  VariantImage[]
  options VariantOption[]

  cartItems  CartItem[]
  orderItems OrderItem[]

  @@unique([productId, sku])
  @@index([productId])
}

model VariantImage {
  id        String   @id @default(uuid())
  variantId String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  variant Variant @relation(fields: [variantId], references: [id])

  @@unique([variantId, sortOrder])
  @@index([variantId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products ProductTag[]

  @@index([name])
}

// Explicit M2M join to allow future metadata
model ProductTag {
  productId String
  tagId     String
  pinned    Boolean  @default(false)
  addedAt   DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
  @@index([tagId, productId])
}

model ProductImageEmbedding {
  id             String                @id @default(uuid())
  productImageId String                @unique
  productId      String // denorm for filtering
  model          String
  dim            Int
  vector         Unsupported("vector")
  updatedAt      DateTime              @updatedAt

  image   ProductImage @relation(fields: [productImageId], references: [id], onDelete: Cascade)
  product Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  // @@index([model, dim])

  @@index([productId])
}

model Review {
  id           String           @id @default(uuid())
  productId    String
  userId       String
  rating       Float            @default(0)
  title        String
  content      String
  isVerified   Boolean          @default(false)
  visibility   ReviewVisibility @default(PUBLISHED)
  reported     Boolean          @default(false)
  helpfulCount Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  images  ReviewImage[]
  votes   ReviewVote[]
  reports ReviewReport[]
  replies ReviewReply[]

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, userId]) // one review per user per product
  @@index([productId, rating, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
}

model ReviewImage {
  id        String   @id @default(uuid())
  reviewId  String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId, sortOrder])
}

model ReviewVote {
  id        String   @id @default(uuid())
  reviewId  String
  userId    String
  type      VoteType
  createdAt DateTime @default(now())

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@index([reviewId, type])
}

model ReviewReport {
  id        String       @id @default(uuid())
  reviewId  String
  userId    String
  reason    ReportReason
  details   String?
  createdAt DateTime     @default(now())

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reviewId, createdAt(sort: Desc)])
}

model ReviewReply {
  id        String   @id @default(uuid())
  reviewId  String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([reviewId, createdAt(sort: Desc)])
}

/// Canonical notification
model Notification {
  id         String                  @id @default(uuid())
  actorId    String? // account who caused the notification (nullable for system)
  actor      Account?                @relation(fields: [actorId], references: [id], onDelete: SetNull)
  type       NotificationType
  title      String
  body       String // optional long body
  data       Json? // arbitrary metadata (orderId, messageId, etc.)
  createdAt  DateTime                @default(now())
  recipients NotificationRecipient[]

  @@index([createdAt])
  @@index([type])
}

/// Per-account read/delivery state
model NotificationRecipient {
  id             String       @id @default(uuid())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String
  account        Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId      String
  readAt         DateTime?
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([notificationId, accountId])
  @@index([accountId, readAt])
  @@index([notificationId])
}

model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id            String   @id @default(uuid())
  cartId        String
  cart          Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variantId     String
  variant       Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  qty           Int
  priceSnapshot Decimal  @default(0) @db.Decimal(12, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([cartId, variantId])
}

model Order {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  itemsTotal    Decimal @default(0) @db.Decimal(12, 2)
  shippingTotal Decimal @default(0) @db.Decimal(12, 2)
  discountTotal Decimal @default(0) @db.Decimal(12, 2)

  currency      Currency
  paymentStatus PaymentStatus
  status        OrderStatus
  placedAt      DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subOrders     SubOrder[]
  payments      Payment[]
}

model SubOrder {
  id      String @id @default(uuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  brandId String
  brand   Brand? @relation(fields: [brandId], references: [id], onDelete: Cascade)

  subtotal    Decimal        @default(0) @db.Decimal(12, 2)
  discount    Decimal        @default(0) @db.Decimal(12, 2) // optional: store how much was deducted
  shippingFee Decimal        @default(0) @db.Decimal(12, 2)
  status      ShipmentStatus @default(PENDING)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
  shipments Shipment[]

  @@unique([orderId, brandId])
}

model OrderItem {
  id            String   @id @default(uuid())
  subOrderId    String
  subOrder      SubOrder @relation(fields: [subOrderId], references: [id], onDelete: Cascade)
  variantId     String
  variant       Variant  @relation(fields: [variantId], references: [id])
  qty           Int
  priceSnapshot Decimal  @default(0) @db.Decimal(12, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  provider  PaymentMethod
  intentId  String?
  status    PaymentStatus
  amount    Decimal       @default(0) @db.Decimal(12, 2)
  currency  Currency
  meta      Json?
  createdAt DateTime      @default(now())
}

model Shipment {
  id           String          @id @default(uuid())
  subOrderId   String
  subOrder     SubOrder        @relation(fields: [subOrderId], references: [id], onDelete: Cascade)
  carrier      String?
  trackingCode String?
  status       ShipmentStatus  @default(PENDING)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  events       ShipmentEvent[]
}

model ShipmentEvent {
  id         String         @id @default(uuid())
  shipmentId String
  shipment   Shipment       @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  occurredAt DateTime
  status     ShipmentStatus
  location   String?
  note       String?
}
