// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  MANAGER
  ADMIN
  BRAND
  USER
  GUEST
}

enum Status {
  UNVERIFIED
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum RevokedReason {
  ACCOUNT_LOGOUT
  EXPIRED
  ADMIN_REVOKED
  PASSWORD_CHANGE
  TOKEN_REUSE_DETECTED
  ROTATED
  OTHER
}

enum Provider {
  LOCAL
  GOOGLE
}

enum BrandStatus {
  DRAFT // Owner started setup but hasn't submitted for verification
  PENDING // Submitted â€” awaiting manual or automated review (default)
  ACTIVE // Approved and live (can sell / receive payouts)
  SUSPENDED // Temporarily disabled (policy issue, missing docs, etc.)
  REJECTED // Rejected during review (owner can fix & re-submit)
  INACTIVE // Owner intentionally deactivated the brand (soft-delete)
}

enum ProductStatus {
  DRAFT
  ARCHIVED
  PUBLISHED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  CASH_ON_DELIVERY
  APPLE_PAY
  GOOGLE_PAY
  FAWRY
  OTHER
}

enum Category {
  FASHION
  HOME
  BEAUTY
  OTHER
}

enum Gender {
  MALE
  FEMALE
}

enum ContentType {
  TEXT
  IMAGE
}

enum ReactionType {
  LIKE
  LOVE
  ADMIRE
}

model Account {
  id                         String                           @id @default(uuid())
  name                       String
  email                      String                           @unique
  password                   String
  role                       Role                             @default(USER)
  createdAt                  DateTime                         @default(now())
  updatedAt                  DateTime                         @updatedAt
  status                     Status                           @default(UNVERIFIED)
  verificationCode           String?
  verificationCodeExpiresAt  DateTime?
  passwordResetCode          String?
  passwordResetCodeExpiresAt DateTime?
  refreshTokens              RefreshToken[]
  provider                   Provider                         @default(LOCAL)
  providerId                 String?
  user                       User?
  brand                      Brand?
  ConversationParticipant    PrivateConversationParticipant[]
  sentPrivateMessages        PrivateMessage[]                 @relation("SentMessages")
  reactedMessages            PrivateMessage[]                 @relation("ReactedMessages")
  privateMessageVisibilities PrivateMessageVisibility[]

  @@unique([provider, providerId])
  @@index([status])
  @@index([role])
}

model User {
  id        String          @id @default(uuid())
  accountId String          @unique
  account   Account         @relation(fields: [accountId], references: [id])
  userName  String          @unique
  photo     String?
  phone     String?
  gender    Gender?
  birthDate DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  payments  PaymentMethod[]
  addresses Address[]
}

model Address {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  government String?
  city       String?
  street     String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

model Brand {
  id              String          @id @default(uuid())
  accountId       String          @unique
  account         Account         @relation(fields: [accountId], references: [id])
  description     String?
  logo            String?
  category        Category[]
  status          BrandStatus     @default(DRAFT)
  instagramUrl    String?
  tiktokUrl       String?
  bussinessPhone  String?
  ownerName       String?
  ownerNationalId String?
  ownerPhone      String?
  crn             String?
  taxId           String?
  paymentMethod   PaymentMethod[]
  Products        Product[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([status])
}

model RefreshToken {
  id            String         @id @default(uuid())
  account       Account        @relation(fields: [accountId], references: [id])
  accountId     String
  token         String
  expiresAt     DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  revokedAt     DateTime?
  revokedReason RevokedReason?
  jti           String         @unique

  @@index([expiresAt])
}

model PrivateConversation {
  id           String                           @id @default(uuid())
  createdAt    DateTime                         @default(now())
  updatedAt    DateTime                         @updatedAt
  archivedAt   DateTime?
  participants PrivateConversationParticipant[]
  messages     PrivateMessage[]

  @@index([updatedAt])
}

model PrivateConversationParticipant {
  id             String              @id @default(uuid())
  conversation   PrivateConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  account        Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId      String
  unreadCount    Int                 @default(0)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@unique([conversationId, accountId])
  @@index([accountId])
}

model PrivateMessage {
  id             String                     @id @default(uuid())
  conversation   PrivateConversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         Account                    @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  content        String
  contentType    ContentType
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  readAt         DateTime?
  deletedAt      DateTime?
  attachments    PrivateMessageAttachment[]
  reactionType   ReactionType?
  reactedById    String?
  reactedBy      Account?                   @relation("ReactedMessages", fields: [reactedById], references: [id], onDelete: SetNull)
  visibilities   PrivateMessageVisibility[]

  @@index([conversationId, createdAt])
  @@index([senderId, createdAt])
}

model PrivateMessageAttachment {
  id        String         @id @default(uuid())
  message   PrivateMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  url       String
  mimeType  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([messageId])
}

model PrivateMessageVisibility {
  id        String         @id @default(uuid())
  message   PrivateMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  account   Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  readAt    DateTime?
  deletedAt DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([messageId, accountId])
  @@index([accountId])
  @@index([messageId])
}

model Product {
  id          String        @id @default(uuid())
  brandId     String
  category    Category
  title       String
  slug        String
  description String?
  attributes  Json?
  status      ProductStatus @default(DRAFT)
  material    String? // NEW: material (e.g., Cotton, Leather)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  brand    Brand           @relation(fields: [brandId], references: [id])
  images   ProductImage[]
  variants Variant[]
  options  ProductOption[]
  tags     ProductTag[]

  @@unique([brandId, slug])
  @@index([category, status, createdAt(sort: Desc)])
  @@index([material])
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  altText   String?
  meta      Json?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, sortOrder])
  @@index([productId])
}

model ProductOption {
  id        String  @id @default(uuid())
  productId String
  name      String // machine name, e.g., "color", "size"
  label     String? // display label, e.g., "Color", "Size"
  sortOrder Int     @default(0)

  product       Product              @relation(fields: [productId], references: [id])
  values        ProductOptionValue[]
  VariantOption VariantOption[]

  @@unique([productId, name])
  @@index([productId, sortOrder])
}

model ProductOptionValue {
  id              String  @id @default(uuid())
  productOptionId String
  value           String // machine value, e.g., "red", "xl"
  label           String? // display value, e.g., "Red", "XL"
  colorHex        String? // optional (#RRGGBB)
  sortOrder       Int     @default(0)

  option       ProductOption   @relation(fields: [productOptionId], references: [id])
  variantLinks VariantOption[]

  @@unique([productOptionId, value])
  @@index([productOptionId, sortOrder])
}

model VariantOption {
  id                   String @id @default(uuid())
  variantId            String
  productOptionId      String
  productOptionValueId String

  variant Variant            @relation(fields: [variantId], references: [id])
  option  ProductOption      @relation(fields: [productOptionId], references: [id])
  value   ProductOptionValue @relation(fields: [productOptionValueId], references: [id])

  // Ensure a variant has at most one selection per option (e.g., only one size)
  @@unique([variantId, productOptionId])
  @@index([productOptionValueId])
}

model Variant {
  id         String   @id @default(uuid())
  productId  String
  sku        String
  price      Decimal  @db.Decimal(12, 2)
  currency   String   @db.VarChar(3)
  stock      Int      @default(0)
  weight     Decimal? @db.Decimal(10, 3)
  dimensions Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product Product         @relation(fields: [productId], references: [id])
  images  VariantImage[]
  options VariantOption[]

  @@unique([productId, sku])
  @@index([productId])
}

model VariantImage {
  id        String   @id @default(uuid())
  variantId String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  variant Variant @relation(fields: [variantId], references: [id])

  @@unique([variantId, sortOrder])
  @@index([variantId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products ProductTag[]

  @@index([name])
}

// Explicit M2M join to allow future metadata
model ProductTag {
  productId String
  tagId     String
  pinned    Boolean  @default(false)
  addedAt   DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
  @@index([tagId, productId])
}
