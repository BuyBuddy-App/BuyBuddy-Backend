
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  verificationCode: 'verificationCode',
  verificationCodeExpiresAt: 'verificationCodeExpiresAt',
  passwordResetCode: 'passwordResetCode',
  passwordResetCodeExpiresAt: 'passwordResetCodeExpiresAt',
  provider: 'provider',
  providerId: 'providerId'
};

exports.Prisma.DeviceTokenScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  lastSeenAt: 'lastSeenAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  userName: 'userName',
  photo: 'photo',
  phone: 'phone',
  photoPublicId: 'photoPublicId',
  gender: 'gender',
  birthDate: 'birthDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentMethods: 'paymentMethods'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  government: 'government',
  city: 'city',
  addressLine: 'addressLine',
  landmark: 'landmark',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  description: 'description',
  logo: 'logo',
  categories: 'categories',
  status: 'status',
  instagramUrl: 'instagramUrl',
  tiktokUrl: 'tiktokUrl',
  businessPhone: 'businessPhone',
  ownerName: 'ownerName',
  ownerNationalId: 'ownerNationalId',
  ownerPhone: 'ownerPhone',
  crn: 'crn',
  taxId: 'taxId',
  paymentMethods: 'paymentMethods',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  revokedAt: 'revokedAt',
  revokedReason: 'revokedReason',
  jti: 'jti'
};

exports.Prisma.PrivateConversationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  archivedAt: 'archivedAt'
};

exports.Prisma.PrivateConversationParticipantScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  accountId: 'accountId',
  unreadCount: 'unreadCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrivateMessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  senderId: 'senderId',
  content: 'content',
  contentType: 'contentType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  reactionType: 'reactionType',
  reactedById: 'reactedById'
};

exports.Prisma.PrivateMessageAttachmentScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  url: 'url',
  mimeType: 'mimeType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrivateMessageVisibilityScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  accountId: 'accountId',
  readAt: 'readAt',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  brandId: 'brandId',
  category: 'category',
  title: 'title',
  slug: 'slug',
  description: 'description',
  attributes: 'attributes',
  status: 'status',
  material: 'material',
  avgRating: 'avgRating',
  ratingsCount: 'ratingsCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  url: 'url',
  altText: 'altText',
  meta: 'meta',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.ProductOptionScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  name: 'name',
  label: 'label',
  sortOrder: 'sortOrder'
};

exports.Prisma.ProductOptionValueScalarFieldEnum = {
  id: 'id',
  productOptionId: 'productOptionId',
  value: 'value',
  label: 'label',
  colorHex: 'colorHex',
  sortOrder: 'sortOrder'
};

exports.Prisma.VariantOptionScalarFieldEnum = {
  id: 'id',
  variantId: 'variantId',
  productOptionId: 'productOptionId',
  productOptionValueId: 'productOptionValueId'
};

exports.Prisma.VariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  sku: 'sku',
  price: 'price',
  currency: 'currency',
  stock: 'stock',
  weight: 'weight',
  dimensions: 'dimensions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VariantImageScalarFieldEnum = {
  id: 'id',
  variantId: 'variantId',
  url: 'url',
  altText: 'altText',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductTagScalarFieldEnum = {
  productId: 'productId',
  tagId: 'tagId',
  pinned: 'pinned',
  addedAt: 'addedAt'
};

exports.Prisma.ProductImageEmbeddingScalarFieldEnum = {
  id: 'id',
  productImageId: 'productImageId',
  productId: 'productId',
  model: 'model',
  dim: 'dim',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  userId: 'userId',
  rating: 'rating',
  title: 'title',
  content: 'content',
  isVerified: 'isVerified',
  visibility: 'visibility',
  reported: 'reported',
  helpfulCount: 'helpfulCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewImageScalarFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  url: 'url',
  altText: 'altText',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewVoteScalarFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  userId: 'userId',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewReportScalarFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  userId: 'userId',
  reason: 'reason',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewReplyScalarFieldEnum = {
  id: 'id',
  reviewId: 'reviewId',
  authorId: 'authorId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  actorId: 'actorId',
  type: 'type',
  title: 'title',
  body: 'body',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationRecipientScalarFieldEnum = {
  id: 'id',
  notificationId: 'notificationId',
  accountId: 'accountId',
  readAt: 'readAt',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN',
  BRAND: 'BRAND',
  USER: 'USER',
  GUEST: 'GUEST'
};

exports.Status = exports.$Enums.Status = {
  UNVERIFIED: 'UNVERIFIED',
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  INACTIVE: 'INACTIVE'
};

exports.Provider = exports.$Enums.Provider = {
  LOCAL: 'LOCAL',
  GOOGLE: 'GOOGLE'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  PAYPAL: 'PAYPAL',
  STRIPE: 'STRIPE',
  CASH_ON_DELIVERY: 'CASH_ON_DELIVERY',
  APPLE_PAY: 'APPLE_PAY',
  GOOGLE_PAY: 'GOOGLE_PAY',
  FAWRY: 'FAWRY',
  OTHER: 'OTHER'
};

exports.BrandStatus = exports.$Enums.BrandStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  REJECTED: 'REJECTED',
  INACTIVE: 'INACTIVE'
};

exports.Category = exports.$Enums.Category = {
  FASHION: 'FASHION',
  HOME: 'HOME',
  BEAUTY: 'BEAUTY',
  OTHER: 'OTHER'
};

exports.RevokedReason = exports.$Enums.RevokedReason = {
  ACCOUNT_LOGOUT: 'ACCOUNT_LOGOUT',
  EXPIRED: 'EXPIRED',
  ADMIN_REVOKED: 'ADMIN_REVOKED',
  PASSWORD_CHANGE: 'PASSWORD_CHANGE',
  TOKEN_REUSE_DETECTED: 'TOKEN_REUSE_DETECTED',
  ROTATED: 'ROTATED',
  OTHER: 'OTHER'
};

exports.ContentType = exports.$Enums.ContentType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE'
};

exports.ReactionType = exports.$Enums.ReactionType = {
  LIKE: 'LIKE',
  LOVE: 'LOVE',
  ADMIRE: 'ADMIRE'
};

exports.ProductStatus = exports.$Enums.ProductStatus = {
  DRAFT: 'DRAFT',
  ARCHIVED: 'ARCHIVED',
  PUBLISHED: 'PUBLISHED'
};

exports.ReviewVisibility = exports.$Enums.ReviewVisibility = {
  PUBLISHED: 'PUBLISHED',
  HIDDEN: 'HIDDEN'
};

exports.VoteType = exports.$Enums.VoteType = {
  UP: 'UP',
  DOWN: 'DOWN'
};

exports.ReportReason = exports.$Enums.ReportReason = {
  SPAM: 'SPAM',
  OFFENSIVE: 'OFFENSIVE',
  INAPPROPRIATE: 'INAPPROPRIATE',
  MISLEADING: 'MISLEADING',
  FAKE_REVIEW: 'FAKE_REVIEW',
  OTHER: 'OTHER'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  MESSAGE: 'MESSAGE',
  ORDER: 'ORDER',
  PROMOTION: 'PROMOTION',
  SYSTEM: 'SYSTEM',
  SECURITY: 'SECURITY',
  REVIEW: 'REVIEW',
  SHIPPING: 'SHIPPING',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  DeviceToken: 'DeviceToken',
  User: 'User',
  Address: 'Address',
  Brand: 'Brand',
  RefreshToken: 'RefreshToken',
  PrivateConversation: 'PrivateConversation',
  PrivateConversationParticipant: 'PrivateConversationParticipant',
  PrivateMessage: 'PrivateMessage',
  PrivateMessageAttachment: 'PrivateMessageAttachment',
  PrivateMessageVisibility: 'PrivateMessageVisibility',
  Product: 'Product',
  ProductImage: 'ProductImage',
  ProductOption: 'ProductOption',
  ProductOptionValue: 'ProductOptionValue',
  VariantOption: 'VariantOption',
  Variant: 'Variant',
  VariantImage: 'VariantImage',
  Tag: 'Tag',
  ProductTag: 'ProductTag',
  ProductImageEmbedding: 'ProductImageEmbedding',
  Review: 'Review',
  ReviewImage: 'ReviewImage',
  ReviewVote: 'ReviewVote',
  ReviewReport: 'ReviewReport',
  ReviewReply: 'ReviewReply',
  Notification: 'Notification',
  NotificationRecipient: 'NotificationRecipient'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
